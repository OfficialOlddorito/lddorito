local LocalScript2 = Instance.new("LocalScript")
LocalScript2.Name = "RbxCharacterSounds"
LocalScript2.Parent = game:GetService("StarterPlayer").StarterPlayerScripts

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- AtomicBinding and BindableEvent setup
local AtomicBinding = script:FindFirstChild("AtomicBinding")
if AtomicBinding then
    AtomicBinding = require(AtomicBinding)
else
    warn("AtomicBinding module not found!")
end

local soundEvent = Instance.new("BindableEvent")
soundEvent.Name = "SoundPlayed"
soundEvent.Parent = script

-- Flag and sound loading function
local function loadFlag(flag)
    local success, result = pcall(function()
        return UserSettings():IsUserFeatureEnabled(flag)
    end)
    return success and result
end

local settingsFlag = "UserFeatureFlag"
if not loadFlag(settingsFlag) then
    warn("Failed to load the settings flag:", settingsFlag)
end

-- Load sound
local function loadSound(assetId)
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://" .. tostring(assetId)
    sound.Looped = false
    sound.Volume = 1
    sound.Parent = workspace
    return sound
end

local sound = loadSound(17231958102)

-- Initialize sound system
local function initializeSoundSystem(instances)
    local player = instances.player
    local humanoid = instances.humanoid
    local rootPart = instances.rootPart
    local sounds = {}

    local SOUND_DATA = {
        ["Jumping"] = {SoundId = "rbxassetid://YourSoundId", Volume = 1},
    }

    for name, props in pairs(SOUND_DATA) do
        local sound = Instance.new("Sound")
        sound.Name = name
        sound.Archivable = false
        sound.RollOffMinDistance = 5
        sound.RollOffMaxDistance = 150
        sound.Volume = 0.65
        for propName, propValue in pairs(props) do
            sound[propName] = propValue
        end
        sound.Parent = rootPart
        sounds[name] = sound
    end

    -- Play sounds on state transition using BindableEvent
    soundEvent.Event:Connect(function(state)
        if state == Enum.HumanoidStateType.Jumping then
            sounds.Jumping:Play()
        end
    end)

    humanoid.StateChanged:Connect(function(_, state)
        soundEvent:Fire(state)
    end)
end

-- Connect to player and character events
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        initializeSoundSystem({
            player = player,
            humanoid = character:WaitForChild("Humanoid"),
            rootPart = character:WaitForChild("HumanoidRootPart")
        })
    end)
end)
